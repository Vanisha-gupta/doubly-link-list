#include<iostream>
#include<stdlib.h>
using namespace std;

struct node{
	int data;
	struct node* next;
	struct node* prev;
}*start;

void create(int num);
void insert_after_pos(int);
void insert_at_pos(int);
void del(int);
void display();
void count();

int main()
{
	
	int num,i,choice;
	struct node *start;
	start = NULL;
	do
	{
		cout<<" ENTER 1 FOR CREATE :- \n"<<endl;
		cout<<" ENTER 2 FOR DISPLAY :- \n"<<endl;
		cout<<" ENTER 3 FOR COUNTING THE NODE :- \n"<<endl;
		cout<<" ENTER 4 FOR INSERT AT POSITION IN A LIST :- \n"<<endl;
		cout<<" ENTER 5 FOR INSERT AT IN A LIST :- \n"<<endl;
		cout<<" ENTER 6 FOR DELETE AN NODE IN A LIST :- \n"<<endl;

		cin>>choice;
		switch(choice)
		{
			case 1 :cout<<"enter item to add in list :- "<<endl;
			cin>>num;
			create(num);
			break;
			
			case 2 :display();
			break;

			case 3 :count();
			break;
			
			case 4 :cout<<"enter element for insert "<<endl;
			cin>>num;
			insert_after_pos(num);
			break;
			
			case 5 :cout<<"enter element for insert "<<endl;
			cin>>num;
			insert_at_pos(num);
			break;
			
			case 6 :cout<<"enter element for delete "<<endl;
			cin>>num;
			del(num);
			break;
			
			default:cout<<"wrong choice ...... enter correct choice "<<endl<<endl;
		}
	}while(1);
	return 0;
	
}

void create(int num)
{
	struct node *q,*t;
	if (start==NULL)
	{
		start = (struct node*)malloc(sizeof(struct node));
		start ->data = num;
		start -> next = NULL;
		start -> prev = NULL;	
	}
	
	else
	{
		q=start;
		while(q->next!= NULL )
		{
			q=q -> next ;
		}
		t=(struct node*) malloc (sizeof(struct node));
		t->next=NULL;
		t->data=num;
		t->prev=q;	
		q->next=t;
	}
}

void display()
	{
		struct node *q;
		
		if(start==NULL)
		{
			cout<<"list is empty"<<endl;
			return;
		}
		cout<<"\n item in list \n"<<endl;
		for(q=start;q!=NULL;q=q->next)
		{
			cout<<q->data<<endl;
		}
	}
	
	void count()
	 { 	int n=0;
 	 	struct node *q;
  		for(q=start;q!=NULL;q=q->next)
  		n++;
 		cout<<"no. of node is :- "<<n<<endl; 
	 }

	void insert_after_pos(int num)
	{
		int pos;
		struct node *q,*t;
		q=start;
		cout<<" ENTER POSITION FOR INSERT "<<endl;
		cin>>pos;
		for(int i=1;i<pos;i++)
		{
			q=q->next;
			if(q==NULL)
			{
				cout<<"there are less than"<<pos<<"element"<<endl;
				return;
			}
		}
				t=(struct node*)malloc(sizeof(struct node));
				t->data=num;
				t->next=q->next;
				t->prev=q;
				t->next->prev=q;
				q->next=t;
				cout<<"enlement inserted"<<endl;	
	}

void insert_at_pos(int num)
	{
		int pos;
		struct node *q,*t;
		q=start;
		cout<<" ENTER POSITION FOR INSERT "<<endl;
		cin>>pos;
		for(int i=1;i<pos-1;i++)
		{
			q=q->next;
			if(q==NULL)
			{
				cout<<"there are less than"<<pos<<"element"<<endl;
				return;
			}
		}
				t=(struct node*)malloc(sizeof(struct node));
				t->data=num;
				t->next=q->next;
				t->prev=q;
				t->next->prev=q;
				q->next=t;
				cout<<"enlement inserted"<<endl;	
	}
	
	void del(int num)
     {
     	struct node *q,*t;
     	t=q=start;
     	q=q->next;
     	while(q != NULL)
     	{
     		if(q->data = num)
     		{
     			t->next=q->next;
     			t->prev=q;
     			free(q);
     			cout<<" NODE DELETED SUCCESSFULLY "<<endl;
		    }
			 t=q;
			 q=q->next;
		}	
	 }
	

